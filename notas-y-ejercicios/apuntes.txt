node.js 25/04/2022

-es un entorno de ejecucion de javaScript del lado del servidor

-la compilación siempre va a ser mas eficiente que la interpretacion, por que la compilación ya tiene un archivo ejecutable en binario.

-un cliente es un software que va a hacer peticiones a varios servidores y estos le van a proporcionar o no data de regreso (data como respuesta)
caracteristicas del cliente:
interfaz grafica como un navegador



npm init -y (genera el archivo dando si a todo) crea un .JSON donde podemos trabajar con ello

buscar comandos de linux o sistema de archivos

NPM (node package manager)
gestor de paquetes de node.js

jSon: no estan de clarados solo tienen brackets y las keys tiene comillas dobles a diferencia de un objeto que tiene que estar declarado ya sea una funcion o una variable

npm run (nos sirve para ejecutar un script dentro de un json mandando a llamar al archivo (node ./src llamar al archivo js desde el JSON
))

npx json-server "sirve para ejecutar el JSON-server de manera local"

--git bash
git log: revisar los commits realizados

---JS async
=HILO DE EJECUCIÓN
dependen del procesador (CPU)
javaScript usa hilos de ejecucion para hacer procesos

=SINCRONO Y ASINCRONO
-Sincrono: operacion que se ejecuta de manera secuencial y por lo tanto debemos esperar para procesar el resultado, las tareas van una a una como si fuese una carretera

-Asincrono: la finalizacion de la operacion es notificada al programa principal, el proceso de la respuesta se hará en algun momento futuro

=CALLBACKS (llamada de vuelta)
-es una funcion que recibe como parametro otra funcion y la ejecuta
-se usan para hacer consultas a bases de datos
-pueden solucionar problemas de flujo de una aplicacion
-si se usa demasiado se puede caer en una definicion de 
"callback hell"

=setTimeout:
ejecuta una funcion solo una vez en un tiempo determinado en milisegundos

=setInterval:
ejecuta una funcion las veces que se le solicita con una condicion de salida en los intervalos de tiempo especificados (N cantidad de veces cada determinado tiempo)

=EVENT LOOP
-posee un modelo de concurrencia basado en un loop de eventos
-una pila es una estructura de datos que va a enlistar datos/procesos

proceso LIFO: "last in firts out"

-cola deejecucion:
es como una sala de espera para funciones que estan retrasadas o suproceso tarda demasiado
el primero que llegue es el primero que va a salir

-pila de ejecucion:
estructura que accede a la ejecucion de una funcion

-interfas:
Es un conjunto de rutinas que provee acceso a funciones de un determinado software.



De Emilio Parra González para todos 09:18 PM
Ahora uso el OperaGx pa gamers
De Gilberto Cervantes para todos 09:18 PM
Netscape


API REST: es un software que va a servir a otros software, normalmente clientes data(json, xml) o servicios web

AJAX- peticiones de cliente

==arquitectura cliente servidor
-el cliente va a ser el navegador

==servidores:
-de base de datos 
-de correos electronicos
-de imagenes
-WEB


==API
interfas de programacion que permiten que otros sisteman interactuen y se comuniquen con otros productos y servicios
interfaz de progrmacion de aplicaciones
=END POINT BUSCAR Y ESTUDIAR

==GET
pedir datos al servidor

==POST


==PUT
altualiza todo

==PATCH
actualiza datos en especifico en el servidor


==HEADER
es un campo en el que colocamos configuraciones, permisos...

==BODY
ahi se encuentra la data

peticion/REQUEST
respuesta/RESPONSE

===Gestion de modulos

con nvm puedes tener las versiones que quieras. Si descargas node de nuevo, solo tendrás la última 
Recuerden ES M Y Common JS, sirven para exportar e importar archivos js entre sì. La diferencia màs notable, es la sintaxis màs amigable de ES M. Poco a poco, node js està cambiando la sintaxis de require('ruta'), por la de import 'ruta'



===PROMESAS===

es una forma de garantizar una respuesta de un callback

-Flujo de estados de una promesa
-pendiente
-resuelta
-rechazada

llamados a API front-end y back-end
llamados a bases de datos back-end

Podemos ejecutar una promesa por medio de los metodos then y catch

comentarios profe {
-todo lo que se ejecuta, va en try(intenta). Si hay un error, se salta el try y 'cacha' el error, entonces, se ejecuta esa parte del code

-el temporizador lo usábamos para ejemplificar el asincronismo. No tiene por què ir en callbacks, promesas, etc. Solo fue usado como ejemplo

-operador ternario:  (condicion) ? si se cumple , haz esto :  si no, ejecuta este código de aquì

-fetch hace peticiones como xmlhttprquest, pero està basado en promesas

-Notas: Express, se utiliza para "levantar" un servidor en su computadora(local), además nos ayuda a crear APIs. Con el definimos nuestros "endpoints". Por ejemplo: http://localhost:3000/usuarios. También podemos crear acciones para la API, con los verbos HTTP: GET, POST, PUT, PATCH, DELETE, etc

recuerden que el endpoint, es después de su URL base y se representa con una diagonal y el nombre. Ejemplo: /usuarios, /posts, /algunaCosa
nodemon, es el equivalente del live server que usamos siempre pero para el backend

ajax significa peticiones HTTP

un error 400 significa que nosotros como usuarios hicimos una peticion incorrecta
}

levantar un servidor con json.server:
json-server rutadetuArchivoJson

links para el proyecto {

  https://jsonplaceholder.typicode.com/

  https://pokeapi.co/

  https://swapi.dev/

  https://www.fbi.gov/wanted/api

  https://api.nasa.gov/

  https://rickandmortyapi.com/

}

team {
  genesis alejandra // chile
  juan pablo niño // Bogota Colombia

}

hackerrank
freecodecamp
primero siéntete cómodo con arreglos y objetos
bubble, quick sort, mergeSort

material design google
design systems
design patterns



para no estar haciendo muchos append o create element
se puede usar esta variable:
ejemplos de variables para recibir html
--let template = `<li class="stats-container">hola</li>`

--let template = `<li>hola</li>`

container.append(template)


buscar: como optimizar el dem

https://www.sommelierdecafe.com/2019/wp-content/uploads/2010/09/grupo-marrano.jpg
